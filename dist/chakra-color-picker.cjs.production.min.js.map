{"version":3,"file":"chakra-color-picker.cjs.production.min.js","sources":["../src/colorPicker.tsx"],"sourcesContent":["import {\n  Button,\n  Popover,\n  PopoverArrow,\n  PopoverContent,\n  PopoverTrigger,\n  SimpleGrid,\n  useBoolean,\n  PlacementWithLogical,\n  ButtonProps,\n} from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\n\nconst defaultColors = [\n  \"gray.500\",\n  \"red.500\",\n  \"orange.500\",\n  \"yellow.500\",\n  \"green.500\",\n  \"teal.500\",\n  \"blue.500\",\n  \"cyan.500\",\n  \"purple.500\",\n  \"pink.500\",\n];\n\nexport const ColorPicker = ({\n  onChange,\n  colors,\n  defaultColor,\n  color,\n  pickerBg,\n  placement,\n  isDisabled,\n  ...props\n}: ColorPickerProps) => {\n  const [isOpen, setIsOpen] = useBoolean();\n  const colorPalette = colors || defaultColors;\n  const [selectedColor, setSelectedColor] = useState<string>(defaultColor || colorPalette[0]);\n\n  useEffect(() => {\n    if (color) {\n      setSelectedColor(color);\n    }\n  }, [color]);\n\n  return (\n    <Popover\n      isOpen={isOpen && !isDisabled}\n      onClose={setIsOpen.toggle}\n      placement={placement}\n    >\n      <PopoverTrigger>\n        <Button\n          bg={selectedColor}\n          onClick={setIsOpen.toggle}\n          _hover={{ bg: selectedColor, transform: \"scale(1.05)\", borderColor: \"gray.300\" }}\n          _active={{ bg: selectedColor }}\n          aria-label=\"color picker\"\n          isDisabled={isDisabled}\n          borderWidth={1}\n          borderColor=\"gray.200\"\n          {...props}\n        ></Button>\n      </PopoverTrigger>\n      <PopoverContent w=\"auto\" bg={pickerBg} boxShadow=\"md\">\n        <PopoverArrow />\n        <SimpleGrid columns={5} p={1} spacing={1}>\n          {colorPalette.map((color, index) => (\n            <Button\n              key={`color-picker-${color}-${index}`}\n              h=\"40px\"\n              w=\"40px\"\n              p={0}\n              minW=\"40px\"\n              bg={color}\n              borderWidth={1}\n              borderColor=\"gray.200\"\n              _hover={{ bg: color, transform: \"scale(1.05)\", borderColor: \"gray.300\" }}\n              _active={{ bg: color }}\n              onClick={() => {\n                setIsOpen.toggle();\n                setSelectedColor(color);\n                onChange(color);\n              }}\n            />\n          ))}\n        </SimpleGrid>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\ninterface ColorPickerProps extends Omit<ButtonProps, 'onChange'> {\n  onChange: (value: string) => void;\n  colors?: string[];\n  defaultColor?: string;\n  color?: string;\n  pickerBg?: string;\n  placement?: PlacementWithLogical;\n  isDisabled?: boolean;\n}\n"],"names":["defaultColors","onChange","colors","defaultColor","color","pickerBg","placement","isDisabled","props","useBoolean","isOpen","setIsOpen","colorPalette","useState","selectedColor","setSelectedColor","useEffect","React","Popover","onClose","toggle","PopoverTrigger","Button","bg","onClick","_hover","transform","borderColor","_active","borderWidth","PopoverContent","w","boxShadow","PopoverArrow","SimpleGrid","columns","p","spacing","map","index","key","h","minW"],"mappings":"qQAaMA,EAAgB,CACpB,WACA,UACA,aACA,aACA,YACA,WACA,WACA,WACA,aACA,gCAGyB,gBACzBC,IAAAA,SACAC,IAAAA,OACAC,IAAAA,aACAC,IAAAA,MACAC,IAAAA,SACAC,IAAAA,UACAC,IAAAA,WACGC,4IAEyBC,eAArBC,OAAQC,OACTC,EAAeV,GAAUF,IACWa,WAAiBV,GAAgBS,EAAa,IAAjFE,OAAeC,cAEtBC,aAAU,WACJZ,GACFW,EAAiBX,KAElB,CAACA,IAGFa,gBAACC,WACCR,OAAQA,IAAWH,EACnBY,QAASR,EAAUS,OACnBd,UAAWA,GAEXW,gBAACI,sBACCJ,gBAACK,wBACCC,GAAIT,EACJU,QAASb,EAAUS,OACnBK,OAAQ,CAAEF,GAAIT,EAAeY,UAAW,cAAeC,YAAa,YACpEC,QAAS,CAAEL,GAAIT,gBACJ,eACXP,WAAYA,EACZsB,YAAa,EACbF,YAAY,YACRnB,KAGRS,gBAACa,kBAAeC,EAAE,OAAOR,GAAIlB,EAAU2B,UAAU,MAC/Cf,gBAACgB,qBACDhB,gBAACiB,cAAWC,QAAS,EAAGC,EAAG,EAAGC,QAAS,GACpCzB,EAAa0B,KAAI,SAAClC,EAAOmC,UACxBtB,gBAACK,UACCkB,oBAAqBpC,MAASmC,EAC9BE,EAAE,OACFV,EAAE,OACFK,EAAG,EACHM,KAAK,OACLnB,GAAInB,EACJyB,YAAa,EACbF,YAAY,WACZF,OAAQ,CAAEF,GAAInB,EAAOsB,UAAW,cAAeC,YAAa,YAC5DC,QAAS,CAAEL,GAAInB,GACfoB,QAAS,WACPb,EAAUS,SACVL,EAAiBX,GACjBH,EAASG"}